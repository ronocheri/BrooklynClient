{"ast":null,"code":"import { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/toolbar\";\nimport * as i5 from \"@angular/material/icon\";\n\nfunction NavbarComponent_mat_toolbar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-toolbar\", 1)(1, \"mat-icon\", 2);\n    i0.ɵɵlistener(\"click\", function NavbarComponent_mat_toolbar_0_Template_mat_icon_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.redirectPageTo(\"home\"));\n    });\n    i0.ɵɵtext(2, \"home\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 3);\n    i0.ɵɵelementStart(4, \"mat-icon\", 4);\n    i0.ɵɵlistener(\"click\", function NavbarComponent_mat_toolbar_0_Template_mat_icon_click_4_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.profile());\n    });\n    i0.ɵɵtext(5, \"account_circle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-icon\", 5);\n    i0.ɵɵlistener(\"click\", function NavbarComponent_mat_toolbar_0_Template_mat_icon_click_6_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.redirectPageTo(\"help\"));\n    });\n    i0.ɵɵtext(7, \"help\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-icon\", 6);\n    i0.ɵɵlistener(\"click\", function NavbarComponent_mat_toolbar_0_Template_mat_icon_click_8_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.logout());\n    });\n    i0.ɵɵtext(9, \"logout\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport class NavbarComponent {\n  constructor(route, authService) {\n    this.route = route;\n    this.authService = authService;\n  }\n\n  ngOnInit() {\n    this.isLoggedIn$ = this.authService.isLoggedIn;\n  }\n\n  logout() {\n    Swal.fire({\n      title: 'Do you want to logout?',\n      showDenyButton: true,\n      confirmButtonText: 'Yes',\n      denyButtonText: 'No',\n      customClass: {\n        actions: 'my-actions',\n        confirmButton: 'order-2',\n        denyButton: 'order-3'\n      }\n    }).then(result => {\n      if (result.isConfirmed) {\n        this.authService.logout();\n      } else if (result.isDenied) {}\n    });\n  }\n\n  redirectPageTo(pageName) {\n    this.authService.redirectTo(pageName);\n  }\n\n  profile() {\n    Swal.fire('Under building...');\n  }\n\n}\n\nNavbarComponent.ɵfac = function NavbarComponent_Factory(t) {\n  return new (t || NavbarComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService));\n};\n\nNavbarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavbarComponent,\n  selectors: [[\"app-navbar\"]],\n  decls: 2,\n  vars: 3,\n  consts: [[\"color\", \"primary\", \"style\", \"height: 50px;\", 4, \"ngIf\"], [\"color\", \"primary\", 2, \"height\", \"50px\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Example icon-button with home icon\", 1, \"example-icon\", 2, \"color\", \"white\", \"font-size\", \"40px\", \"height\", \"40px\", \"width\", \"40px\", 3, \"click\"], [1, \"example-spacer\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Example icon-button with account_circle icon\", 1, \"example-icon\", 2, \"color\", \"white\", \"font-size\", \"40px\", \"height\", \"40px\", \"width\", \"40px\", 3, \"click\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Example icon-button with help icon\", 1, \"example-icon\", 2, \"color\", \"white\", \"font-size\", \"40px\", \"height\", \"40px\", \"width\", \"40px\", 3, \"click\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Example icon-button with logout icon\", 1, \"example-icon\", 2, \"color\", \"white\", \"font-size\", \"40px\", \"height\", \"40px\", \"width\", \"40px\", 3, \"click\"]],\n  template: function NavbarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NavbarComponent_mat_toolbar_0_Template, 10, 0, \"mat-toolbar\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.isLoggedIn$));\n    }\n  },\n  dependencies: [i3.NgIf, i4.MatToolbar, i5.MatIcon, i3.AsyncPipe],\n  styles: [\".example-spacer[_ngcontent-%COMP%] {\\n    flex: 1 1 auto;\\n  }\\n  \\n  mat-icon[_ngcontent-%COMP%]{\\n    cursor: pointer;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksY0FBYztFQUNoQjs7RUFFQTtJQUNFLGVBQWU7QUFDbkIiLCJmaWxlIjoibmF2YmFyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1zcGFjZXIge1xuICAgIGZsZXg6IDEgMSBhdXRvO1xuICB9XG4gIFxuICBtYXQtaWNvbntcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59Il19 */\"]\n});","map":{"version":3,"sources":["C:\\Users\\ronoc\\Desktop\\Ron\\MyGitHubProjects\\TestAngularNode\\client\\src\\app\\components\\navbar\\navbar\\navbar.component.ts","C:\\Users\\ronoc\\Desktop\\Ron\\MyGitHubProjects\\TestAngularNode\\client\\src\\app\\components\\navbar\\navbar\\navbar.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AppRoutingModule } from 'src/app/routing/app-routing.module';\nimport { AuthService } from 'src/app/services/auth.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  isLoggedIn$?: Observable<boolean>; \n  \n  constructor(private route: Router,private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.isLoggedIn$ = this.authService.isLoggedIn;\n  }\n\n  logout()\n  {\n    Swal.fire({\n      title: 'Do you want to logout?',\n      showDenyButton: true,\n      confirmButtonText: 'Yes',\n      denyButtonText: 'No',\n      customClass: {\n        actions: 'my-actions',\n        confirmButton: 'order-2',\n        denyButton: 'order-3',\n      }\n    }).then((result: { isConfirmed: any; isDenied: any; }) => {\n      if (result.isConfirmed) {\n        this.authService.logout();\n      } else if (result.isDenied) {\n        \n      }\n    })\n  }\n\n  redirectPageTo(pageName:string)\n  {\n    this.authService.redirectTo(pageName)\n  }\n\n  profile()\n  {\n    Swal.fire(('Under building...'))\n  }\n\n}","<mat-toolbar color=\"primary\" style=\"height: 50px;\" *ngIf=\"isLoggedIn$ |  async as isLoggedIn\">\n  <mat-icon mat-icon-button class=\"example-icon\" (click)=\"redirectPageTo('home')\" aria-label=\"Example icon-button with home icon\" style=\"color: white; font-size: 40px;    height: 40px;  width: 40px;\">home</mat-icon>\n\n\n  <span class=\"example-spacer\"></span>\n  <!-- <button mat-icon-button class=\"example-icon favorite-icon\" aria-label=\"Example icon-button with heart icon\">\n    <mat-icon>favorite</mat-icon>\n  </button>  -->\n  <!-- <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with account_circle icon\">\n    <mat-icon>account_circle</mat-icon>\n  </button> -->\n\n\n    <!-- <mat-icon mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with account_circle icon\" style=\"color: white; font-size: 40px;    height: 40px;  width: 40px;\">account_circle</mat-icon>\n    <a routerLink=\"/login\"><mat-icon mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with logout icon\" style=\"color: white; font-size: 40px;    height: 40px;  width: 40px;\">logout</mat-icon></a> -->\n\n    <mat-icon mat-icon-button class=\"example-icon\" (click)=\"profile()\" aria-label=\"Example icon-button with account_circle icon\" style=\"color: white; font-size: 40px;    height: 40px;  width: 40px;\">account_circle</mat-icon>\n    <mat-icon mat-icon-button class=\"example-icon\" (click)=\"redirectPageTo('help')\" aria-label=\"Example icon-button with help icon\" style=\"color: white; font-size: 40px;    height: 40px;  width: 40px;\">help</mat-icon>\n   <mat-icon mat-icon-button class=\"example-icon\" (click)=\"logout()\" aria-label=\"Example icon-button with logout icon\" style=\"color: white; font-size: 40px;    height: 40px;  width: 40px;\">logout</mat-icon>\n\n\n  <!-- <span class=\"material-icons-round\">\n    account_circle\n    </span> -->\n</mat-toolbar>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}